个人原因加班
公司原因加班
上一分工作的成长

matlab
matfor
Python
numpy + scipy + matplotlib + pandas + scikit-learn + tensorflow

DAY-01  2018-8-18
【1】Numpy的特点
	1、擅长数值计算；
	2、足够高的运算性能；
	3、支持矢量化运算
	4、免费、开源
		示例代码：vec.py

【2】Numpy的数组
	1、Numpy中数组是ndarray类类型对象
		特点：将实际数据和元数据(对数据的描述)分开存放，独立操作，以此提升性能
	2、Numpy数组的元素类型必须相同--同质性
	3、Numpy数组的元素可以通过基0的下表标独访问
		size个元素的数组，合理的下标范围：[0,size-1] [-size,-1]
	4、Numpy数组通过dtype和shape属性表示元素的类型和维度。
		其中维度的类型时元组，按照从高到低的顺序排列每一维的大小	shape(2,3) 两行三列
			shape(3, 1, 3)  3页1行3列
	5、创建数组的方法
		numpy.arange([start=0,] stop[, step=1])
		numpy.array(任意可被解释为数组的序列)
			示例代码：shape.py

【3】Numpy内置的数据类型
	1、布尔 bool_
	2、整数
		1）有负号整数
			int8, int16, int32, int64
		2）无符号整数
			uint8, uint16, uint32, uint64
	3、浮点数
		float16, float32,float64
	4、复数
		complex64、complex128
	5、字符串
		str_

【4】显示使用数据类型
	1.默认数据类型不满足需要，人为指定
	2.复合类型，在一个元素中包含多个字段
	3.用不同类型访问同一个元素
		numpy.array(...,dtype=类型)	
		代码：dtype.py	

【5】切片(多维数组按照 页、行、列 的规则切片)
	数组[起始位置:终止位置:步长,...]
		缺省起始：首（+步长）/尾（-步长）
		缺省终止：尾后（+步长）/首前（-步长）
		步长缺省：1
	代码：slice.py	

【6】改变维度
	1、视图变维	
		1.根据所指定的新维度，够着新的元数据，实际数据共享。
			源数组.reshape(新维度) --》 目标数组
				\________________________/
							|
				源数组和目标数组共享数据，源数组不改变
							|
		2.源数组.ravel() --> 一维目标数组

	2、复制变维：
		源数组.flatten() --> 一维目标数组
		    |						|
		实际数据  <-非共享-> 实际数据副本

		# 变成复制变维 -- > 显式的复制一份
		a = np.arange(1,9)
		b = a.reshape(2, 4).copy()
		a += 10
		print(a,b)
	
	3、就地变维
		源数组.shape=新维度
		源数组.resize(新维度)
	
	4、数据转置
		f = a.transpose()
		源数组.transpose()  --> 转置视图
		行列互换 -- 》 行变列、列变行
	
	代码：reshape.py
	/* 注意-没有特别的说明的话这些操作的数据都是共享的 */
		
【7】合并和拆分
	1、垂直合分
		v -- 垂直 stack--栈
		① vstack((上，下))	--> 垂直合并
		② concatenate((上下),axis=0)
			* 二维：axis 轴向 0行（垂直） 1列（水平）
			* 三维：axis 0 页 1 行 2 列

		① vsplit（数组，等分份数）--> 垂直拆分
		② split(数组，等分份数,axis=0)
		示例：ver.py
		
	2、水平合分
		① hstack((左, 右)) --> 水平合并
		② concatenate((左, 右), axis=1)

		① hsplit(数组, 等分份数) --> 水平拆分
		② split(数组, 等分份数, axis=1)
		示例：hor.py

	3、深度合分
		dstack((前, 后)) --> 深度合并
		dsplit(数组, 等分份数) --> 深度拆分
		示例：deep.py

	4、行列合并
		row_stack((上, 下)) --> 行合并
		column_stack((左, 右)) --> 列合并
		代码：
			
【8】ndarray对象的属性
	dtype -- 元素数据类型
	shape -- 数组维度,(3,4)
	ndim -- 数组维度,2
	size -- 元素数，只有一维数组猜等价于len()
	itemsize -- 每个元素的字节数
	nbytes -- 所有元素的总字节数,size*itemsize
	T  -- 转置视图
	real/imag -- 复数数组的实部/虚部
	flat -- 扁平迭代器
		代码：attr

【9】数据可视化（matplotlib --> 数学绘图库）
	1、缺省样式
		plot()	曲线图(水平坐标数组, 垂直坐标数组)
		代码：plot.py
	2、线型线宽和颜色
		plot(...,linestyle=线型, linewidth=线宽,color)
		代码：plot2.py
	
	3、设置坐标范围
		mp.xlim(最小水平坐标, 最大水平坐标)
		mp.ylim(最小垂直坐标, 最大垂直坐标)
		代码：plt3.py
	4、设置刻度标签
		mp.xticks(刻度位置数组[，刻度文本数组])
		mp.yticks(刻度位置数组[，刻度文本数组])
		代码：plot4.py												牌				牌/2
		mp.xticks([-np.pi,-np.pi/2,0,np.pi/2,np.pi*3/4,np.pi],[r'$-\pi$',r'$-\frac{\pi}{2}$'])
	
	5、十字坐标轴
		ax = mp.gca()  # 当前坐标图
		ax.spines['left'].set_position(坐标系, 位置坐标)
		ax.spines['right'].set_color(颜色)
		代码：plot5.py
	
	6、图例
		plot(...,label=图例文本)
		legend(loc=位置)
		代码：plot6.py

	7、特殊点
		sactter(水平坐标数组， 垂直坐标数组)	--》 散点图 只有点 没有线
		代码：plot7.py
	
	8、备注
		annotate(备注文本,xy=目标位置,xycoords=目标坐标系,
		xytext=备注位置,textcoords=备注坐标系,fontsize=字体大小,arrowprops=箭头属性)
		代码：plot8.py

DAY2 2018/8/20
【1】图形对象
	figure(对象名(窗口标题),figsize=大小,dpi=分辨率,facecolor=颜色)
	返回值：一个图形窗口对象(创建/置当前)
	代码：fig.py


【2】子图
	subplot(总行数，总列数，图号)
	subplot(总行数x100+总列数x10+图号)
		subplot创建子图，置为当前
		代码sub1.py

【3】栅格布局
	import matplotlib.gridspcec as mg
	gs = mg.GridSpec(行数，列数)
	subplot(gs[切片])
	代码sub2.py

【4】自由布局
		給的都是比例 0 - 1之间
	axes([左,底,宽,高])
	代码sub3.py

【5】坐标刻度
	xxxLocator(...) --> 坐标定位器对象
	ax = mp.gca()
	设置水平轴主刻度定位器
	ax.xaxis.set_major_locator(坐标定位器对象)
	设置水平轴次刻度定位器
	ax.xaxis.set_minor_locator(坐标定位器对象)	

	设置垂直轴次刻度定位器
	ax.yaxis.set_minor_locator(坐标定位器对象)	
	设置垂直轴次刻度定位器
	ax.yaxis.set_minor_locator(坐标定位器对象)	

	代码：tick.py

【6】散点图
	scatter（水平坐标，垂直坐标，s=大小，c=颜色，cmap=颜色映射,
			marker=点型，alpha=透明度，label=标签）
		x	y	z
		10	40	1
		20	30	2

	scatter([10,20],[20,30],c=[1,2])
	代码：scatter.py

【7】区域填充
	fill_between(水平坐标，起始垂直坐标，终止值垂直坐标,
				填充条件，color=颜色，alpha=透明度)
	fill.py

【8】条形图
	用一个列表表示多个[1,2,3]
	bar(水平坐标，高度，ec=边缘色，fc=填充色，label=标签)
	高度为正值，矩形条画在零轴上方；
	高度为负值，矩形条画在零轴下方；
	bar.py

【9】等高线图
	高差份数 -- 线的稀疏程度
	不带填充：
		contour（点阵水平坐标，点阵垂直坐标，点阵直立坐标，高差份数，clolors=颜色，linewidths=线宽）
	带填充：	 
		等高线图对象 = contourf（点阵水平坐标，点阵垂直坐标，点阵直立坐标，高差份数，cmap=颜色映射）
		clabel（等高线图对象，inline_spacing=线内空白，fmt=格式化串，fontsize=字体大小）
		代码cntr.py
【10】热成像图
	mp.imshow(矩阵，cmap=颜色映射，origin=纵轴方向)
	代码：hot.py

【11】饼图
	pie(值，间隙，标签，颜色，格式，shadow=阴影，startangle=起始角度)
	代码：pip.py

【12】坐标线
	grid(which='major/minor',axis='x/y/both'/linewidth=线宽，linestyle=线型，color=颜色)
	代码：grid.py

【13】极坐标
	mp.gca(projection='polar')
	plot/scatter(极角，极径,...)
	代码：polar.py
	
【14】三维曲面
	from mpl_toolkits.mplot3d import axes3d
	ax = mp.gca(projection='3d')
	ax.set_xlabel(...)	
	ax.set_ylabel(...)	
	ax.set_zlabel(...)	
	ax.plot_surface(水平坐标，垂直坐标，直立坐标，rstride=行距，cstrice=列距，cmap=颜色映射)
		三维线框图
	ax.plot_wireframe(水平坐标，垂直坐标，直立坐标，rstride=行距，cstrice=列距，linewidth=线宽，color=颜色)
	s3.py

【15】半对数坐标
	semilogy（参数同plot）


【16】简单动画
	代码：bub.py
	import matplotlib.animation as ma
	ma.FuncAnimation(图形对象，更新函数，生成器函数，interval=间隔毫秒)
	每间隔interval毫秒，调用一次更新函数
	代码：bub.py
	postion size	frowth	color
	x y						  r	   g	  b		alpha
	float float float float float float float	 float
	代码：sig.py

【17】numpy 的通用函数
	1.读文件
		x	x	x	x
		x	x	x	x
		x	x	x	x
		x	x	x	x
		loadtext(文件名，
				delimiter=分隔符,
				usecols=选择列，	一个元组
				unpack=True/False，是否展开列，
				dtype=目标类型,
				converters=转换器	--》二维数组/一维数组的元组
		)

	dates = np.loadtxt('aapl.csv',delimiter=',',usecols=(1),unpack=True,
                   dtype=np.dtype('M8[D]'),converters={1:dmy2ymd})  #dmy2ymd 一个转换函数


【18】算数平均值
	numpy.mean(S) --> m
	算数平均值就是对真值的无偏估计

【19】加权平均值
	样本：S = [s1,s2,...,sn]
	权重：W = [w1,w2,...,wn]
		加权平均值：a = (s1w1 + s2w2 + ... snwn)/(w1+w2+...wn)
			numpy.average(S,weights=W) --> a
			算数平均值就是各个样本权重相等时的加权平均值
		成交量加权平均价格
			代码：vwap.py
		时间加权平均价格
			代码：twap.py
		最大值和最小值
			max/min：在一个数组中寻找最大值/最小值
			maximum/minimum：在两个数组的对应位置元素中寻找最大值和最小值
